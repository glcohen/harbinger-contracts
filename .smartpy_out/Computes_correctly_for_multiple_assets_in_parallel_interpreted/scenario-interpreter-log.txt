Comment...
 h1: Computes correctly for multiple assets in parallel
Comment...
 h2: GIVEN a Normalizer contract for two assets
Creating contract
 -> (Pair (Pair {"BTC-USD"; "XTZ-USD"} {Elt "BTC-USD" (Pair (Pair 0 "0") (Pair (Pair (Pair 0 -1) (Pair {Elt 0 0} 0)) (Pair (Pair 0 -1) (Pair {Elt 0 0} 0)))); Elt "XTZ-USD" (Pair (Pair 0 "0") (Pair (Pair (Pair 0 -1) (Pair {Elt 0 0} 0)) (Pair (Pair 0 -1) (Pair {Elt 0 0} 0))))}) (Pair 3 "KT1QLPABNCD4z1cSYVv3ntYDYgtWTed7LkYr"))
 => ./.smartpy_out/Computes_correctly_for_multiple_assets_in_parallel_interpreted/testContractTypes.0.2.tz 2
 => ./.smartpy_out/Computes_correctly_for_multiple_assets_in_parallel_interpreted/testContractCode.0.2.tz 1224
 => ./.smartpy_out/Computes_correctly_for_multiple_assets_in_parallel_interpreted/testContractCode.0.2.tz.json 1176
 => ./.smartpy_out/Computes_correctly_for_multiple_assets_in_parallel_interpreted/testPrettyPrint.0.2.py 47
Comment...
 h2: WHEN two updates are provided which touch both assets
Executing update(sp.set_type_expr({'BTC-USD' : (sp.timestamp(1), (sp.timestamp(2), (1, (1, (2, (3, 4)))))), 'XTZ-USD' : (sp.timestamp(1), (sp.timestamp(2), (5, (5, (6, (7, 8))))))}, sp.TBigMap(sp.TString, sp.TPair(sp.TTimestamp, sp.TPair(sp.TTimestamp, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TNat)))))))))...
 -> (Pair (Pair {"BTC-USD"; "XTZ-USD"} {Elt "BTC-USD" (Pair (Pair 2 "1") (Pair (Pair (Pair 0 0) (Pair {Elt 0 8} 8)) (Pair (Pair 0 0) (Pair {Elt 0 4} 4)))); Elt "XTZ-USD" (Pair (Pair 6 "1") (Pair (Pair (Pair 0 0) (Pair {Elt 0 48} 48)) (Pair (Pair 0 0) (Pair {Elt 0 8} 8))))}) (Pair 3 "KT1QLPABNCD4z1cSYVv3ntYDYgtWTed7LkYr"))
Executing update(sp.set_type_expr({'BTC-USD' : (sp.timestamp(3), (sp.timestamp(4), (9, (9, (10, (11, 12)))))), 'XTZ-USD' : (sp.timestamp(3), (sp.timestamp(4), (13, (13, (14, (15, 6))))))}, sp.TBigMap(sp.TString, sp.TPair(sp.TTimestamp, sp.TPair(sp.TTimestamp, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TNat)))))))))...
 -> (Pair (Pair {"BTC-USD"; "XTZ-USD"} {Elt "BTC-USD" (Pair (Pair 8 "3") (Pair (Pair (Pair 0 1) (Pair {Elt 0 8; Elt 1 120} 128)) (Pair (Pair 0 1) (Pair {Elt 0 4; Elt 1 12} 16)))); Elt "XTZ-USD" (Pair (Pair 9 "3") (Pair (Pair (Pair 0 1) (Pair {Elt 0 48; Elt 1 84} 132)) (Pair (Pair 0 1) (Pair {Elt 0 8; Elt 1 6} 14))))}) (Pair 3 "KT1QLPABNCD4z1cSYVv3ntYDYgtWTed7LkYr"))
Comment...
 h2: THEN the contract is only tracking two updates for each asset
Verifying ((sp.contract_data(0).assetMap['BTC-USD'].prices.last - sp.contract_data(0).assetMap['BTC-USD'].prices.first) + 1) == 2...
 => ./.smartpy_out/Computes_correctly_for_multiple_assets_in_parallel_interpreted/testVerify.7.tz 53
 OK
Verifying ((sp.contract_data(0).assetMap['BTC-USD'].volumes.last - sp.contract_data(0).assetMap['BTC-USD'].volumes.first) + 1) == 2...
 => ./.smartpy_out/Computes_correctly_for_multiple_assets_in_parallel_interpreted/testVerify.8.tz 53
 OK
Verifying ((sp.contract_data(0).assetMap['XTZ-USD'].prices.last - sp.contract_data(0).assetMap['XTZ-USD'].prices.first) + 1) == 2...
 => ./.smartpy_out/Computes_correctly_for_multiple_assets_in_parallel_interpreted/testVerify.9.tz 53
 OK
Verifying ((sp.contract_data(0).assetMap['XTZ-USD'].volumes.last - sp.contract_data(0).assetMap['XTZ-USD'].volumes.first) + 1) == 2...
 => ./.smartpy_out/Computes_correctly_for_multiple_assets_in_parallel_interpreted/testVerify.10.tz 53
 OK
Comment...
 h2: AND the computed price is the VWAP of the two updates
Verifying sp.contract_data(0).assetMap['BTC-USD'].computedPrice == 8...
 => ./.smartpy_out/Computes_correctly_for_multiple_assets_in_parallel_interpreted/testVerify.12.tz 35
 OK
Verifying sp.contract_data(0).assetMap['XTZ-USD'].computedPrice == 9...
 => ./.smartpy_out/Computes_correctly_for_multiple_assets_in_parallel_interpreted/testVerify.13.tz 35
 OK