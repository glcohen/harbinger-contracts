Comment...
 h1: Trims multiple assets correctly
Comment...
 h2: GIVEN a Normalizer contract for two assets
Creating contract
 -> (Pair (Pair {"BTC-USD"; "XTZ-USD"} {Elt "BTC-USD" (Pair (Pair 0 "0") (Pair (Pair (Pair 0 -1) (Pair {Elt 0 0} 0)) (Pair (Pair 0 -1) (Pair {Elt 0 0} 0)))); Elt "XTZ-USD" (Pair (Pair 0 "0") (Pair (Pair (Pair 0 -1) (Pair {Elt 0 0} 0)) (Pair (Pair 0 -1) (Pair {Elt 0 0} 0))))}) (Pair 2 "KT1QLPABNCD4z1cSYVv3ntYDYgtWTed7LkYr"))
 => ./.smartpy_out/Trims_multiple_assets_correctly_interpreted/testContractTypes.0.2.tz 2
 => ./.smartpy_out/Trims_multiple_assets_correctly_interpreted/testContractCode.0.2.tz 1224
 => ./.smartpy_out/Trims_multiple_assets_correctly_interpreted/testContractCode.0.2.tz.json 1176
 => ./.smartpy_out/Trims_multiple_assets_correctly_interpreted/testPrettyPrint.0.2.py 47
Comment...
 h2: WHEN two updates are provided which touch both assets
Executing update(sp.set_type_expr({'BTC-USD' : (sp.timestamp(1), (sp.timestamp(2), (2, (1, (3, (4, 5)))))), 'XTZ-USD' : (sp.timestamp(1), (sp.timestamp(2), (7, (6, (8, (9, 10))))))}, sp.TBigMap(sp.TString, sp.TPair(sp.TTimestamp, sp.TPair(sp.TTimestamp, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TNat)))))))))...
 -> (Pair (Pair {"BTC-USD"; "XTZ-USD"} {Elt "BTC-USD" (Pair (Pair 2 "1") (Pair (Pair (Pair 0 0) (Pair {Elt 0 10} 10)) (Pair (Pair 0 0) (Pair {Elt 0 5} 5)))); Elt "XTZ-USD" (Pair (Pair 7 "1") (Pair (Pair (Pair 0 0) (Pair {Elt 0 70} 70)) (Pair (Pair 0 0) (Pair {Elt 0 10} 10))))}) (Pair 2 "KT1QLPABNCD4z1cSYVv3ntYDYgtWTed7LkYr"))
Executing update(sp.set_type_expr({'BTC-USD' : (sp.timestamp(3), (sp.timestamp(4), (12, (11, (13, (14, 15)))))), 'XTZ-USD' : (sp.timestamp(3), (sp.timestamp(4), (17, (16, (18, (19, 20))))))}, sp.TBigMap(sp.TString, sp.TPair(sp.TTimestamp, sp.TPair(sp.TTimestamp, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TNat)))))))))...
 -> (Pair (Pair {"BTC-USD"; "XTZ-USD"} {Elt "BTC-USD" (Pair (Pair 9 "3") (Pair (Pair (Pair 0 1) (Pair {Elt 0 10; Elt 1 180} 190)) (Pair (Pair 0 1) (Pair {Elt 0 5; Elt 1 15} 20)))); Elt "XTZ-USD" (Pair (Pair 13 "3") (Pair (Pair (Pair 0 1) (Pair {Elt 0 70; Elt 1 340} 410)) (Pair (Pair 0 1) (Pair {Elt 0 10; Elt 1 20} 30))))}) (Pair 2 "KT1QLPABNCD4z1cSYVv3ntYDYgtWTed7LkYr"))
Comment...
 h2: AND a third update is provided for the second asset
Executing update(sp.set_type_expr({'XTZ-USD' : (sp.timestamp(5), (sp.timestamp(6), (22, (21, (23, (24, 25))))))}, sp.TBigMap(sp.TString, sp.TPair(sp.TTimestamp, sp.TPair(sp.TTimestamp, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TNat)))))))))...
 -> (Pair (Pair {"BTC-USD"; "XTZ-USD"} {Elt "BTC-USD" (Pair (Pair 9 "3") (Pair (Pair (Pair 0 1) (Pair {Elt 0 10; Elt 1 180} 190)) (Pair (Pair 0 1) (Pair {Elt 0 5; Elt 1 15} 20)))); Elt "XTZ-USD" (Pair (Pair 19 "5") (Pair (Pair (Pair 1 2) (Pair {Elt 1 340; Elt 2 550} 890)) (Pair (Pair 1 2) (Pair {Elt 1 20; Elt 2 25} 45))))}) (Pair 2 "KT1QLPABNCD4z1cSYVv3ntYDYgtWTed7LkYr"))
Comment...
 h2: THEN the contract is only tracking two updates for each asset
Verifying ((sp.contract_data(0).assetMap['BTC-USD'].prices.last - sp.contract_data(0).assetMap['BTC-USD'].prices.first) + 1) == 2...
 => ./.smartpy_out/Trims_multiple_assets_correctly_interpreted/testVerify.9.tz 53
 OK
Verifying ((sp.contract_data(0).assetMap['BTC-USD'].volumes.last - sp.contract_data(0).assetMap['BTC-USD'].volumes.first) + 1) == 2...
 => ./.smartpy_out/Trims_multiple_assets_correctly_interpreted/testVerify.10.tz 53
 OK
Verifying ((sp.contract_data(0).assetMap['XTZ-USD'].prices.last - sp.contract_data(0).assetMap['XTZ-USD'].prices.first) + 1) == 2...
 => ./.smartpy_out/Trims_multiple_assets_correctly_interpreted/testVerify.11.tz 53
 OK
Verifying ((sp.contract_data(0).assetMap['XTZ-USD'].volumes.last - sp.contract_data(0).assetMap['XTZ-USD'].volumes.first) + 1) == 2...
 => ./.smartpy_out/Trims_multiple_assets_correctly_interpreted/testVerify.12.tz 53
 OK
Comment...
 h2: AND the computed price of the first asset is the VWAP of the first two updates
Verifying sp.contract_data(0).assetMap['BTC-USD'].computedPrice == 9...
 => ./.smartpy_out/Trims_multiple_assets_correctly_interpreted/testVerify.14.tz 35
 OK
Comment...
 h2: AND the computed price of the second asset is the VWAP of the last two updates
Verifying sp.contract_data(0).assetMap['XTZ-USD'].computedPrice == 19...
 => ./.smartpy_out/Trims_multiple_assets_correctly_interpreted/testVerify.16.tz 35
 OK